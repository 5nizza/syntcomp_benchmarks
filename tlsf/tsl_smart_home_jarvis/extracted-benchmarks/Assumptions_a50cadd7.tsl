assume {
}

guarantee {
  (G (([alarm.control <- turnOn()] -> [alarm.control <- turnOff()]) R alarm));
  (G (([alarm.control <- turnOff()] -> [alarm.control <- turnOn()]) R (! alarm)));
  (G ((cm.ready || cm.standby) || cm.busy));
  (G (cm.ready -> ((! cm.standby) && (! cm.busy))));
  (G (cm.standby -> ((! cm.busy) && (! cm.ready))));
  (G (cm.busy -> ((! cm.ready) && (! cm.standby))));
  (G ((([cm.ctrl <- turnOn()] && cm.standby) -> (X cm.busy)) U (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready)));
  (G ((([cm.ctrl <- turnOff()] && cm.ready) -> (X cm.busy)) U ([cm.ctrl <- turnOn()] R cm.standby)));
  (G ((([cm.ctrl <- makeCoffee()] && cm.ready) -> (X cm.busy)) U (cm.finished && (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready))));
  (G (! (room.heating.off <-> room.heating.on)));
  (G ([room.heating.ctrl <- turnOn()] -> (F ([room.heating.ctrl <- turnOff()] R room.heating.on))));
  (G ([room.heating.ctrl <- turnOff()] -> (F ([room.heating.ctrl <- turnOn()] R room.heating.off))));
  (G (! (room.light.on <-> room.light.off)));
  (G (([room.light <- turnOn()] || ([room.light <- toggle()] && room.light.off)) -> (X (F (([room.light <- turnOff()] || [room.light <- toggle()]) R room.light.on)))));
  (G (([room.light <- turnOff()] || ([room.light <- toggle()] && room.light.on)) -> (X (F (([room.light <- turnOn()] || [room.light <- toggle()]) R room.light.off)))));
  (G (room.empty -> (! switch.toggled)));
  (G (room.somebodyEnters -> ((! room.empty) W room.somebodyLeaves)));
  (G ((room.somebodyLeaves && room.empty) -> (room.empty W room.somebodyEnters)));
  (G (! (room.shades.open && room.shades.closed)));
  (G ([room.shades.ctrl <- (moveTo percent100())] -> (F (((! [room.shades.ctrl <- (moveTo percent100())]) && (! [room.shades.ctrl <- room.shades.ctrl])) R room.shades.open))));
  (G ([room.shades.ctrl <- (moveTo percent0())] -> (F (((! [room.shades.ctrl <- (moveTo percent0())]) && (! [room.shades.ctrl <- room.shades.ctrl])) R room.shades.closed))));
  (G ([system.startNewTimer <- min20()] -> (F timeout)));
  (G ([system.startNewTimer <- hour1()] -> (F timeout)));
  (G ([system.startNewTimer <- hour2()] -> (F timeout)));
  (G (F ((between t.am5) t.am10)));
  (G (F (! ((between t.am5) t.am10))));
  (G (F t.saturday));
  (G (F (! t.saturday)));
  (G (F t.sunday));
  (G (F (! t.sunday)));
  (G (F ((between t.pm7) t.pm8)));
  (G (F (! ((between t.pm7) t.pm8))));
  (G (room.warnlight.on <-> (! room.warnlight.off)));
  (G (([room.warnlight.control <- turnOn()] -> [room.warnlight.control <- turnOff()]) R room.warnlight.on));
  (G (([room.warnlight.control <- turnOff()] -> [room.warnlight.control <- turnOn()]) R room.warnlight.off));
  (G (room.window.opened -> ((! (allWindowsClosed room)) W room.window.closed)));
}