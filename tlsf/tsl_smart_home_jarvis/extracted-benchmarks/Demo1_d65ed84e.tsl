assume {
  (G ([BlackoutTimer.startNewTimer <- BlackoutTimer.min20()] -> (F BlackoutTimer.timeout)));
  (G ([BlackoutTimer.startNewTimer <- BlackoutTimer.hour1()] -> (F BlackoutTimer.timeout)));
  (G ([BlackoutTimer.startNewTimer <- BlackoutTimer.hour2()] -> (F BlackoutTimer.timeout)));
  (G (! (Shades.open && Shades.closed)));
  (G ([Shades.ctrl <- (Shades.moveTo Shades.percent100())] -> (F (((! [Shades.ctrl <- (Shades.moveTo Shades.percent100())]) && (! [Shades.ctrl <- Shades.ctrl])) R Shades.open))));
  (G ([Shades.ctrl <- (Shades.moveTo Shades.percent0())] -> (F (((! [Shades.ctrl <- (Shades.moveTo Shades.percent0())]) && (! [Shades.ctrl <- Shades.ctrl])) R Shades.closed))));
  (G ((Shades.closed && (! [Shades.ctrl <- (Shades.moveTo Shades.percent100())])) -> (X Shades.closed)));
  (G ((Shades.open && (! [Shades.ctrl <- (Shades.moveTo Shades.percent0())])) -> (X Shades.open)));
  (G (! (Heating.off <-> Heating.on)));
  (G ([Heating.ctrl <- Heating.turnOn()] -> (F ([Heating.ctrl <- Heating.turnOff()] R Heating.on))));
  (G ([Heating.ctrl <- Heating.turnOff()] -> (F ([Heating.ctrl <- Heating.turnOn()] R Heating.off))));
  (G ((CM.ready || CM.standby) || CM.busy));
  (G (CM.ready -> ((! CM.standby) && (! CM.busy))));
  (G (CM.standby -> ((! CM.busy) && (! CM.ready))));
  (G (CM.busy -> ((! CM.ready) && (! CM.standby))));
  (G (([CM.ctrl <- CM.turnOn()] && CM.standby) -> (X (CM.busy U (([CM.ctrl <- CM.makeCoffee()] || [CM.ctrl <- CM.turnOff()]) R CM.ready)))));
  (G (([CM.ctrl <- CM.turnOff()] && CM.ready) -> (X (CM.busy U ([CM.ctrl <- CM.turnOn()] R CM.standby)))));
  (G (([CM.ctrl <- CM.makeCoffee()] && CM.ready) -> (X (CM.busy U (CM.finished && (([CM.ctrl <- CM.makeCoffee()] || [CM.ctrl <- CM.turnOff()]) R CM.ready))))));
  (F (CM.standby || CM.ready));
  (G (! (Roomlight.on <-> Roomlight.off)));
  (G (([Roomlight.light <- Roomlight.turnOn()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.off)) -> (X (F (([Roomlight.light <- Roomlight.turnOff()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.on)))));
  (G (([Roomlight.light <- Roomlight.turnOff()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.on)) -> (X (F (([Roomlight.light <- Roomlight.turnOn()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.off)))));
  (G (Room.empty -> (! Room.switch.toggled)));
  (G (Room.somebodyEnters -> ((! Room.empty) W (Room.somebodyLeaves && Room.empty))));
  (G ((Room.somebodyLeaves && Room.empty) -> (Room.empty W Room.somebodyEnters)));
  (G (Room.bed.occupied -> (! Room.empty)));
  (((! Room.empty) W (Room.somebodyLeaves && Room.empty)) || (Room.empty W Room.somebodyEnters));
  (G (F ((Time.between Time.am5) Time.am10)));
  (G (F ((Time.between Time.am0) Time.am10)));
  (G (F (! ((Time.between Time.am5) Time.am10))));
  (G (F Time.saturday));
  (G (F (! Time.saturday)));
  (G (F Time.sunday));
  (G (F (! Time.sunday)));
  (G (F ((Time.between Time.pm7) Time.pm8)));
  (G (F (! ((Time.between Time.pm7) Time.pm8))));
  (G (F Time.am7));
  (G (F Time.am0));
  (G (F Time.am5));
  (G (! (Frontdoor.locked <-> Frontdoor.unlocked)));
  (G ([Frontdoor.door <- Frontdoor.lock()] -> (X (Frontdoor.locked W [Frontdoor.door <- Frontdoor.unlock()]))));
  (G ([Frontdoor.door <- Frontdoor.unlock()] -> (X (Frontdoor.unlocked W [Frontdoor.door <- Frontdoor.lock()]))));
}

guarantee {
  (G (Room.somebodyEnters -> (X (F (Roomlight.on W Room.empty)))));
  (G (Room.empty -> (X (F Roomlight.off))));
  (G (Time.am0 -> (X (Frontdoor.locked U Time.am5))));
  (G (Firesensor.fire -> (X (Frontdoor.unlocked && [music.ctrl <- (play alarm())]))));
  (G (Firesensor.fire -> (F (Heating.off W (! Firesensor.fire)))));
  (G (((gt outside.temperature) Room.temperature) -> (F Heating.off)));
  (G ((((lt tenDegree()) Room.temperature) && (! Room.empty)) -> (F Heating.on)));
  (G ((bright outside.brightness) -> (F Shades.closed)));
  (G (Room.somebodyEnters -> (F (CM.ready W (Room.somebodyLeaves && Room.empty)))));
  (G (System.blackout -> ([BlackoutTimer.startNewTimer <- min20()] && ((F (! System.blackout)) || ((BlackoutTimer.timeout -> ((X Frontdoor.locked) <-> Room.empty)) W (! System.blackout))))));
}