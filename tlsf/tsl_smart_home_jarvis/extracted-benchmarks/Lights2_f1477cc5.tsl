assume {
  (G ([Timer.startNewTimer <- Timer.min20()] -> (F Timer.timeout)));
  (G ([Timer.startNewTimer <- Timer.hour1()] -> (F Timer.timeout)));
  (G ([Timer.startNewTimer <- Timer.hour2()] -> (F Timer.timeout)));
  (G (! (Roomlight.on <-> Roomlight.off)));
  (G (([Roomlight.light <- Roomlight.turnOn()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.off)) -> (X (F (([Roomlight.light <- Roomlight.turnOff()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.on)))));
  (G (([Roomlight.light <- Roomlight.turnOff()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.on)) -> (X (F (([Roomlight.light <- Roomlight.turnOn()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.off)))));
  (G (Room.empty -> (! Room.switch.toggled)));
  (G (Room.somebodyEnters -> ((! Room.empty) W Room.somebodyLeaves)));
  (G ((Room.somebodyLeaves && Room.empty) -> (Room.empty W Room.somebodyEnters)));
}

guarantee {
  (G ((Room.somebodyLeaves && Room.empty) -> ([Timer.startNewTimer <- Timer.hour2()] && (F (Room.somebodyEnters || (Timer.timeout && (F (RoomLight.off W Room.somebodyEnters))))))));
}