assume {
  (G (Room.empty -> (! Room.switch.toggled)));
  (G (Room.somebodyEnters -> ((! Room.empty) W (Room.somebodyLeaves && Room.empty))));
  (G ((Room.somebodyLeaves && Room.empty) -> (Room.empty W Room.somebodyEnters)));
  (G (Room.bed.occupied -> (! Room.empty)));
  (((! Room.empty) W (Room.somebodyLeaves && Room.empty)) || (Room.empty W Room.somebodyEnters));
  (G (! (Roomlight.on <-> Roomlight.off)));
  (G (([Roomlight.light <- Roomlight.turnOn()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.off)) -> (X (F (([Roomlight.light <- Roomlight.turnOff()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.on)))));
  (G (([Roomlight.light <- Roomlight.turnOff()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.on)) -> (X (F (([Roomlight.light <- Roomlight.turnOn()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.off)))));
}

guarantee {
  (G (Room.somebodyEnters -> (X (F (Roomlight.on W Room.empty)))));
  (G (Room.empty -> (X (F Roomlight.off))));
}
