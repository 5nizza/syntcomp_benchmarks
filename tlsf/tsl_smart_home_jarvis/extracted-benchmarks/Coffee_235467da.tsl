assume {
  (G (room.somebodyEnters -> ((! room.empty) W room.somebodyLeaves)));
  (G ((room.somebodyLeaves && room.empty) -> (room.empty W room.somebodyEnters)));
  (G ((cm.ready || cm.standby) || cm.busy));
  (G (cm.ready -> ((! cm.standby) && (! cm.busy))));
  (G (cm.standby -> ((! cm.busy) && (! cm.ready))));
  (G (cm.busy -> ((! cm.ready) && (! cm.standby))));
  (G ((([cm.ctrl <- turnOn()] && cm.standby) -> (X cm.busy)) U (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready)));
  (G ((([cm.ctrl <- turnOff()] && cm.ready) -> (X cm.busy)) U ([cm.ctrl <- turnOn()] R cm.standby)));
  (G ((([cm.ctrl <- makeCoffee()] && cm.ready) -> (X cm.busy)) U (cm.finished && (([cm.ctrl <- makeCoffee()] || [cm.ctrl <- turnOff()]) R cm.ready))));
}

guarantee {
  (G (room.somebodyEnters -> (F (cm.ready W (room.somebodyLeaves && room.empty)))));
}