assume {
  (G (! (Shades.open && Shades.closed)));
  (G ([Shades.ctrl <- (Shades.moveTo Shades.percent100())] -> (F (((! [Shades.ctrl <- (Shades.moveTo Shades.percent100())]) && (! [Shades.ctrl <- Shades.ctrl])) R Shades.open))));
  (G ([Shades.ctrl <- (Shades.moveTo Shades.percent0())] -> (F (((! [Shades.ctrl <- (Shades.moveTo Shades.percent0())]) && (! [Shades.ctrl <- Shades.ctrl])) R Shades.closed))));
  (G ((Shades.closed && (! [Shades.ctrl <- (Shades.moveTo Shades.percent100())])) -> (X Shades.closed)));
  (G ((Shades.open && (! [Shades.ctrl <- (Shades.moveTo Shades.percent0())])) -> (X Shades.open)));
  (G (! ((opened Shades.intent) <-> (closed Shades.intent))));
}

guarantee {
  (G ((opened Shades.intent) -> (F (Shades.open W (! (opened Shades.intent))))));
  (G ((closed Shades.intent) -> (F (Shades.closed W (! (closed Shades.intent))))));
}