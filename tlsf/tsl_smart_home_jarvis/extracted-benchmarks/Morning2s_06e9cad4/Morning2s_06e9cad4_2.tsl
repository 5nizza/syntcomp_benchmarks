assume {
  (G (Room.empty -> (! Room.switch.toggled)));
  (G (Room.somebodyEnters -> ((! Room.empty) W Room.somebodyLeaves)));
  (G ((Room.somebodyLeaves && Room.empty) -> (Room.empty W Room.somebodyEnters)));
  (G (F Time.saturday));
  (G (F (! Time.saturday)));
  (G (F Time.sunday));
  (G (F (! Time.sunday)));
  (G (! (Roomlight.on <-> Roomlight.off)));
  (G (([Roomlight.light <- Roomlight.turnOn()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.off)) -> (X (F (([Roomlight.light <- Roomlight.turnOff()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.on)))));
  (G (([Roomlight.light <- Roomlight.turnOff()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.on)) -> (X (F (([Roomlight.light <- Roomlight.turnOn()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.off)))));
}

guarantee {
  (G (((Time.am630 && (! (Time.saturday || Time.sunday))) && bed.occupied) -> (F (((X Roomlight.on) <-> (! (bright outside.brightness))) W (Room.somebodyLeaves && Room.empty)))));
}
