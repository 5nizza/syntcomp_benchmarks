// import "../deviceModel/Room.tsl" as Room
// import "../deviceModel/Timer.tsl" as Timer

always guarantee {
  (X Roomlight.on) -> ! Room.empty
}
always guarantee {
    Room.somebodyLeaves && Room.empty
    -> ([Timer.startNewTimer <- Timer.hour2()]
    && F ( Room.somebodyEnters
        || (Timer.timeout && F (Roomlight.off W Room.somebodyEnters))))
}
always guarantee {
    bright outside.brightness
        -> (Room.switch.toggled && Roomlight.off -> X F (Roomlight.on W (Room.switch.toggled || Room.empty)))
}
assume {
  (G (! (Roomlight.on <-> Roomlight.off)));
  (G (([Roomlight.light <- Roomlight.turnOn()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.off)) -> (X (F (([Roomlight.light <- Roomlight.turnOff()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.on)))));
  (G (([Roomlight.light <- Roomlight.turnOff()] || ([Roomlight.light <- Roomlight.toggle()] && Roomlight.on)) -> (X (F (([Roomlight.light <- Roomlight.turnOn()] || [Roomlight.light <- Roomlight.toggle()]) R Roomlight.off)))));
  (G (F Time.saturday));
  (G (F (! Time.saturday)));
  (G (F Time.sunday));
  (G (F (! Time.sunday)));
}

guarantee {
  (G (((Time.am630 && (! (Time.saturday || Time.sunday))) && Room.bed.occupied) -> (F (((X Roomlight.on) <-> (! (bright outside.brightness))) W (Room.switch.toggled && Room.somebodyLeaves && Room.empty)))));
}
